<?php
/**
 *
 * @date
 * @author Oleksii Bogatchenko
 * @package composer-preloader-plugin
 * @version 1.0
 */

namespace Oleksii\ComposerPreloader\Composer\PreloadGenerator;

use  MJS\TopSort\Implementations\StringSort;

class PreloadGenerator {

    private Config $config;

    public function __construct(Config $config)
    {
        $this->config = $config;
    }

    public function generate()
    {
        $finder = new Finder($this->config);
        $fileList = $finder->findFiles();


        $sorter = new StringSort();

        foreach ($fileList as $fileInfo) {
            $sorter->add($fileInfo['path'], $fileInfo['deps']);;
        }

        $sorted = $sorter->sort();
        $rootDir = realpath(dirname(\Composer\Factory::getComposerFile()));
        $outputFile = fopen( $rootDir . DIRECTORY_SEPARATOR . $this->config->getOutputFile(), 'w');
        fwrite($outputFile, $this->renderHeader());

        foreach ($sorted as $filePath) {
            fwrite($outputFile, $this->renderFile($filePath));
        }

        fclose($outputFile);
    }

    private function renderHeader()
    {
        $code = <<<PHP
<?php
/** Generated by composer-preloader-plugin */
\$rootDir = \dirname(__DIR__);

if (!\\function_exists('opcache_compile_file') || !\\ini_get('opcache.enable')) {
  echo 'Opcache is not available.';
  die(1);
}

if ('cli' === \\PHP_SAPI && !\\ini_get('opcache.enable_cli')) {
  echo 'Opcache is not enabled for CLI applications.';
  die(2);
}

PHP;

        return $code;

    }
    private function renderFile($filePath)
    {
        $code = <<<PHP
\\opcache_compile_file(\$rootDir . \\DIRECTORY_SEPARATOR  .  '$filePath');

PHP;

        return $code;
    }
}